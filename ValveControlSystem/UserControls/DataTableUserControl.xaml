<UserControl x:Class="ValveControlSystem.UserControls.DataTableUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:ValveControlSystem.UserControls"
             mc:Ignorable="d" 
             d:DesignHeight="400" d:DesignWidth="900"
             x:Name="dataTableUserCtrl" Loaded="dataTableUserCtrl_Loaded">
    <UserControl.Resources>
        <Style x:Key="dgCell" TargetType="{x:Type TextBlock}">
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
        <Style x:Key="dgHeader" TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
        </Style>
        <Style  TargetType="DataGridRow">
            <Setter Property="Background" Value="#F2F2F2" />
            <Setter Property="Height" Value="25"/>
            <Setter Property="Foreground" Value="Black" />
            <Style.Triggers>
                <!--隔行换色-->
                <Trigger Property="AlternationIndex" Value="0" >
                    <Setter Property="Background" Value="#e7e7e7" />
                </Trigger>
                <Trigger Property="AlternationIndex" Value="1" >
                    <Setter Property="Background" Value="#ffffff" />
                </Trigger>

                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="LightGray"/>
                    <!--<Setter Property="Foreground" Value="White"/>-->
                </Trigger>

                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <RoutedUICommand x:Key="CopyCell" Text="Copy Cell"/>
        <local:Int2WordConverter x:Key="int2WordConverter"/>
    </UserControl.Resources>
    <UserControl.InputBindings>
        <KeyBinding Modifiers="Ctrl" Key="D" Command="{StaticResource CopyCell}"/>
    </UserControl.InputBindings>
    <UserControl.CommandBindings>
        <CommandBinding Command="{StaticResource CopyCell}"
                    CanExecute="CommandBinding_CopyCell_CanExecute"
                    Executed="CommandBinding_CopyCell_Executed"/>
    </UserControl.CommandBindings>
    <Grid>
        <DataGrid ItemsSource="{Binding TableDatas,ElementName=dataTableUserCtrl}" LoadingRow="dgDataTable_LoadingRow"
                  AutoGenerateColumns="False" IsReadOnly="True" CanUserSortColumns="False"
                  CanUserAddRows="False" CanUserDeleteRows="False" x:Name="dgDataTable" AlternationCount="2">
            <DataGrid.Columns>
                <DataGridTextColumn Header="电磁阀监视电压(V)" MinWidth="91" Binding="{Binding SolenoidValveVoltage}" 
                                    ElementStyle="{StaticResource dgCell}" HeaderStyle="{StaticResource dgHeader}"
                                    IsReadOnly="True" Width="1.3*" x:Name="dgtcSolenoidValveVoltage"></DataGridTextColumn>
                <DataGridTextColumn Header="正电源监视(V)" MinWidth="40" Binding="{Binding PositivePowerMonitor}" 
                                    ElementStyle="{StaticResource dgCell}" HeaderStyle="{StaticResource dgHeader}"
                                    IsReadOnly="True" Width="*" x:Name="dgtcPositivePowerMonitor"></DataGridTextColumn>
                <DataGridTextColumn Header="负电源监视(V)" MinWidth="40" Binding="{Binding NegativePowerMonitor}" 
                                    ElementStyle="{StaticResource dgCell}" HeaderStyle="{StaticResource dgHeader}"
                                    IsReadOnly="True" Width="*" x:Name="dgtcNegativePowerMonitor"></DataGridTextColumn>
                <DataGridTextColumn Header="循环阀打开" MinWidth="40" Binding="{Binding Tool2CycleValveDriveCurrent,Converter={StaticResource int2WordConverter}}" 
                                    ElementStyle="{StaticResource dgCell}" HeaderStyle="{StaticResource dgHeader}"
                                    IsReadOnly="True" Width="0.9*" x:Name="dgtcTool2CycleValveDriveCurrent"></DataGridTextColumn>
                <DataGridTextColumn Header="循环阀关闭" MinWidth="40" Binding="{Binding Tool2TestValveDriveCurrent,Converter={StaticResource int2WordConverter}}" 
                                    ElementStyle="{StaticResource dgCell}" HeaderStyle="{StaticResource dgHeader}"
                                    IsReadOnly="True" Width="0.9*" x:Name="dgtcTool2TestValveDriveCurrent"></DataGridTextColumn>
                <DataGridTextColumn Header="测试阀打开" MinWidth="40" Binding="{Binding Tool1CycleValveDriveCurrent,Converter={StaticResource int2WordConverter}}" 
                                    ElementStyle="{StaticResource dgCell}" HeaderStyle="{StaticResource dgHeader}"
                                    IsReadOnly="True" Width="0.9*" x:Name="dgtcTool1CycleValveDriveCurrent"></DataGridTextColumn>
                <DataGridTextColumn Header="测试阀关闭" MinWidth="40" Binding="{Binding Tool1TestValveDriveCurrent,Converter={StaticResource int2WordConverter}}" 
                                    ElementStyle="{StaticResource dgCell}" HeaderStyle="{StaticResource dgHeader}"
                                    IsReadOnly="True" Width="0.9*" x:Name="dgtcTool1TestValveDriveCurrent"></DataGridTextColumn>
            </DataGrid.Columns>
        </DataGrid>
        <ToggleButton x:Name="tbtnPin" HorizontalAlignment="Right" VerticalAlignment="Top" Height="18" Width="18" Margin="0,-20,50,0"
                      BorderThickness="0" Background="Transparent" Style="{DynamicResource ToggleButtonStyle1}"
                      MouseEnter="Button_MouseEnter" MouseLeave="Button_MouseLeave"
                      ToggleButton.Checked="tbtnPin_Checked" ToggleButton.Unchecked="tbtnPin_Unchecked" RenderTransformOrigin="0.5,0.5">
            <ToggleButton.Resources>
                <Style x:Key="FocusVisual">
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
                <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
                <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
                <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
                <SolidColorBrush x:Key="Button.Pressed.Background" Color="Transparent"/>
                <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
                <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
                <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
                <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
                <Style x:Key="ToggleButtonStyle1" TargetType="{x:Type ToggleButton}">
                    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                    <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="Padding" Value="1"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                    <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Button.IsDefaulted" Value="true">
                                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="true">
                                        <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                        <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ToggleButton.Resources>
            <ToggleButton.RenderTransform>
                <RotateTransform x:Name="trans" Angle="0"/>
            </ToggleButton.RenderTransform>
            <ToggleButton.Triggers>
                <EventTrigger RoutedEvent="ToggleButton.Checked">
                    <BeginStoryboard >
                        <Storyboard>
                            <DoubleAnimation From="0" To="-90" RepeatBehavior="1x" Duration="0:0:0.1"
                                             Storyboard.TargetName="trans"
                                             Storyboard.TargetProperty="Angle"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="ToggleButton.Unchecked">
                    <BeginStoryboard >
                        <Storyboard>
                            <DoubleAnimation From="-90" To="0" RepeatBehavior="1x" Duration="0:0:0.1"
                                             Storyboard.TargetName="trans"
                                             Storyboard.TargetProperty="Angle"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </ToggleButton.Triggers>
            <Path Fill="Black" Width="10" Height="13" Stretch="Fill" Data="M16,12V4H17V2H7V4H8V12L6,14V16H11.2V22H12.8V16H18V14L16,12Z"
                   RenderTransformOrigin="0.5,0.5">
                <Path.RenderTransform>
                    <TransformGroup>
                        <RotateTransform Angle="90"/>
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
        </ToggleButton>
    </Grid>
</UserControl>
